{"version":3,"sources":["SecondCounter/Setting/SecondCounter.module.css","reportWebVitals.ts","SecondCounter/Display/Display.tsx","SecondCounter/counter-reducer.tsx","SecondCounter/Display/DisplayContainer.tsx","SecondCounter/Setting/Setting.tsx","SecondCounter/Setting/SettingContainer.tsx","SecondCounter/Routes.tsx","SecondCounter/redux.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Display","props","disabled","counter","maxValue","count","className","s","wrap","content","display","error","buttons","Button","variant","color","size","onClick","incValue","resValue","nav","to","InitialState","startValue","setValueAC","type","DisplayContainer","connect","state","dispatch","Setting","useState","startUseValue","setStartValue","maxUseValue","setMaxValue","useEffect","countWrap","style","paddingTop","TextField","value","onChange","e","onChangeMax","currentTarget","onChangeMin","setValue","localStorage","setItem","JSON","stringify","SettingContainer","action","onChangeMaxAC","onChangeMinAC","max","start","getItem","parse","path","exact","render","rootReducer","combineReducers","isError","store","createStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49b8249b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavLink\":\"SecondCounter_NavLink__2bTzT\",\"wrap\":\"SecondCounter_wrap__1Dugj\",\"content\":\"SecondCounter_content__2Img7\",\"display\":\"SecondCounter_display__11X_V\",\"error\":\"SecondCounter_error__23HSg\",\"countWrap\":\"SecondCounter_countWrap__qLEG4\",\"buttons\":\"SecondCounter_buttons__3SN64\",\"nav\":\"SecondCounter_nav__1lzsh\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport s from '../Setting/SecondCounter.module.css'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {MapDispatchToPropsType, MapStateToPropsType} from \"./DisplayContainer\";\r\n\r\ntype DialogPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nfunction Display(props: DialogPropsType) {\r\n\r\n    const incValue = () => {\r\n        props.incValue()\r\n    }\r\n    const resValue = () => {\r\n        props.resValue()\r\n    }\r\n\r\n    let disabled = props.counter.maxValue === props.counter.count\r\n\r\n    return (\r\n        <div className={s.wrap}>\r\n            <div className={s.content}>\r\n                <div className={disabled ? s.display + ' ' + s.error : s.display}> {props.counter.count} </div>\r\n\r\n                <div className={s.buttons}>\r\n                    <Button\r\n                        variant={'contained'}\r\n                        color={'primary'}\r\n                        size={'small'}\r\n                        onClick={incValue}\r\n                        disabled={disabled}\r\n                    >\r\n                        inc </Button>\r\n                    <Button\r\n                        variant={'contained'}\r\n                        color={'primary'}\r\n                        size={'small'}\r\n                        onClick={resValue}\r\n                    >\r\n                        reset </Button>\r\n\r\n                    <NavLink className={s.nav} to='/settings'> <Button\r\n                        variant={'contained'}\r\n                        color={'primary'}\r\n                        size={'small'}\r\n                    >\r\n                        Setting </Button>\r\n                    </NavLink>\r\n\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Display","\r\n let InitialState = {\r\n    startValue:0,\r\n    maxValue:0,\r\n    count:0,\r\n    error:false\r\n}\r\nexport type InitialStateType = {\r\n    startValue:number,\r\n    maxValue:number,\r\n    count:number,\r\n    error:boolean\r\n}\r\n\r\nexport const counterReducer = (state:InitialStateType = InitialState, action:DispatchType ):InitialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        case 'INC_VALUE':\r\n            return {...state,\r\n            count: state.count + 1}\r\n\r\n        case 'RES_VALUE':\r\n            return {...state,\r\n                count: state.startValue}\r\n\r\n        case 'SET_VALUE':\r\n            return {...state,\r\n                startValue:action.startValue,\r\n                maxValue:action.maxValue,\r\n                count:action.startValue\r\n            }\r\n        case 'MAX_VALUE':\r\n            const isError = action.value <=state.startValue || action.value < 0\r\n            return {\r\n                ...state,\r\n                maxValue:action.value,\r\n                error: isError\r\n            }\r\n\r\n        case 'MIN_VALUE': {\r\n            const isError = action.value >= state.maxValue || action.value < 0\r\n            return {\r\n                ...state,\r\n                startValue: action.value,\r\n                error: isError\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport type DispatchType = IncValueACActionType | ResValueACActionType | SetValueACActionType | OnChangeMaxACActionType | OnChangeMinACActionType\r\n\r\ntype IncValueACActionType = ReturnType<typeof incValueAC>\r\ntype ResValueACActionType = ReturnType<typeof resValueAC>\r\ntype SetValueACActionType = ReturnType<typeof setValueAC>\r\ntype OnChangeMaxACActionType = ReturnType<typeof onChangeMaxAC>\r\ntype OnChangeMinACActionType = ReturnType<typeof onChangeMinAC>\r\n\r\nexport const incValueAC = () => {\r\n    return {\r\n        type: 'INC_VALUE'\r\n    } as const\r\n}\r\nexport const resValueAC = () => {\r\n    return {\r\n        type: 'RES_VALUE'\r\n    } as const\r\n}\r\n\r\nexport const setValueAC = (maxValue:number, startValue:number) => {\r\n    return {\r\n        type: 'SET_VALUE', maxValue:maxValue, startValue:startValue\r\n    } as const\r\n}\r\n export const onChangeMaxAC = (value:number) => {\r\n     return {\r\n         type: 'MAX_VALUE', value\r\n     } as const\r\n }\r\n export const onChangeMinAC = (value:number) => {\r\n     return {\r\n         type: 'MIN_VALUE', value\r\n     } as const\r\n }\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Display from \"./Display\";\r\nimport {ReduxStateType} from \"../redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {incValueAC, InitialStateType, resValueAC} from \"../counter-reducer\";\r\n\r\n\r\nexport type MapStateToPropsType = {\r\n    counter: InitialStateType\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    incValue:() => void\r\n    resValue:() => void\r\n}\r\nconst mapDispatchToProps = (dispatch:Dispatch):MapDispatchToPropsType => {\r\n    return {\r\n         incValue: () => {\r\n         dispatch(incValueAC())\r\n        },\r\n        resValue: () => {\r\n            dispatch(resValueAC())\r\n        }\r\n}\r\n}\r\nconst mapStateToProps = (state:ReduxStateType):MapStateToPropsType => {\r\n    return {\r\n        counter: state.counter\r\n    }\r\n}\r\n\r\n\r\nconst DisplayContainer = connect(mapStateToProps,mapDispatchToProps)(Display)\r\n\r\nexport default DisplayContainer","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport s from \"./SecondCounter.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {MapDispatchToPropsType, MapStateToPropsType} from \"./SettingContainer\";\r\n\r\n\r\ntype DialogPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nfunction Setting(props: DialogPropsType) {\r\n    const [startUseValue, setStartValue] = useState(props.counter.startValue)\r\n    const [maxUseValue, setMaxValue] = useState(props.counter.maxValue)\r\n\r\n    useEffect(() => {\r\n        setStartValue(props.counter.startValue)\r\n        setMaxValue(props.counter.maxValue)\r\n    }, [props.counter])\r\n\r\n    const onClick = () => {\r\n        props.setValue(maxUseValue, startUseValue)\r\n        localStorage.setItem('maxValue', JSON.stringify(maxUseValue));\r\n        localStorage.setItem('startValue', JSON.stringify(startUseValue));\r\n    }\r\n    const onChangeMax = (e:ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        props.onChangeMax(+e.currentTarget.value)\r\n    }\r\n    const onChangeMin = (e:ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        props.onChangeMin(+e.currentTarget.value)\r\n    }\r\n\r\n    let error = props.counter.error\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div className={s.wrap}>\r\n                <div className={s.content}>\r\n                    <div className={s.display}>\r\n                        <div className={s.countWrap}>\r\n                            <div className={error ? s.error : ''} style={{paddingTop: '4px'}}>MAX VALUE:</div>\r\n                            <div>\r\n                                <TextField\r\n                                size={'small'}\r\n                                variant={'outlined'}\r\n                                error={error}\r\n                                type=\"number\"\r\n                                value={maxUseValue}\r\n                                onChange={onChangeMax}\r\n                            /></div>\r\n                        </div>\r\n                        <div className={s.countWrap}>\r\n                            <div className={error ? s.error : ''} style={{paddingTop: '4px'}}>MIN VALUE:</div>\r\n                            <div>\r\n                                <TextField\r\n                                size={'small'}\r\n                                variant={'outlined'}\r\n                                type=\"number\"\r\n                                value={startUseValue}\r\n                                error={error}\r\n                                onChange={onChangeMin}\r\n                            /></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={s.buttons}>\r\n                        <NavLink className={s.nav} to={'/Counter'}>\r\n                            <Button\r\n                                variant={'contained'}\r\n                                color={'primary'}\r\n                                size={'large'}\r\n                                disabled={error}\r\n                                onClick={onClick}>\r\n                                set\r\n                            </Button>\r\n                        </NavLink>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Setting","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Setting from \"./Setting\";\r\nimport {InitialStateType, onChangeMaxAC, onChangeMinAC, setValueAC} from \"../counter-reducer\";\r\nimport {ReduxStateType} from \"../redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type MapStateToPropsType = {\r\n    counter: InitialStateType\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    setValue: (maxValue:number, startValue:number) => void\r\n    onChangeMax: (value:number) => void\r\n    onChangeMin: (value:number) => void\r\n}\r\nconst mapDispatchToProps = (dispatch:Dispatch):MapDispatchToPropsType => {\r\n    return {\r\n        setValue: (maxValue:number, startValue:number) => {\r\n          let action = setValueAC(maxValue,startValue)\r\n            dispatch(action)\r\n        },\r\n         onChangeMax:(value:number) => {\r\n             let action = onChangeMaxAC(value)\r\n             dispatch(action)\r\n        },\r\n        onChangeMin:(value:number) => {\r\n            let action = onChangeMinAC(value)\r\n            dispatch(action)\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps = (state:ReduxStateType):MapStateToPropsType => {\r\n    return {\r\n        counter: state.counter\r\n    }\r\n}\r\n\r\nconst SettingContainer = connect(mapStateToProps,mapDispatchToProps)(Setting)\r\n\r\nexport default SettingContainer","import {Redirect, Route, Switch} from 'react-router-dom'\r\nimport React, {useEffect} from \"react\";\r\nimport DisplayContainer from \"./Display/DisplayContainer\";\r\nimport SettingContainer from \"./Setting/SettingContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {setValueAC} from \"./counter-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapDispatchPropsType = {\r\n    setValue: (max: number, start: number) => void\r\n}\r\n\r\nfunction Routes(props: MapDispatchPropsType) {\r\n    useEffect(() => {\r\n        let startValue = localStorage.getItem('startValue')\r\n        let maxValue = localStorage.getItem('maxValue')\r\n        if (maxValue && startValue) {\r\n            props.setValue(JSON.parse(maxValue), JSON.parse(startValue))\r\n        }\r\n    },[] )\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Switch>\r\n\r\n                <Route path={'/'} exact render={() => <Redirect to={'/Counter'}/> } />\r\n                <Route path={'/Counter'}  render={() => <DisplayContainer/>}/>\r\n                <Route path={'/settings'} render={() => <SettingContainer/>}/>\r\n\r\n                <Route render={() => <DisplayContainer/>}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        setValue:(max:number, start: number) => {\r\n            let action = setValueAC(max, start)\r\n            dispatch(action)\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Routes)","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport type ReduxStateType = ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer)\r\n\r\n\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Routes from \"./SecondCounter/Routes\";\nimport store from \"./SecondCounter/redux\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          <Provider store={store}>\n    <Routes/>\n          </Provider>\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}