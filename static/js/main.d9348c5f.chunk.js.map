{"version":3,"sources":["reportWebVitals.ts","Counter/CounterSet/InputDisplay.tsx","Counter/CounterSet/SetButton.tsx","Counter/CounterSet/Setting.tsx","Counter/CounterDisplay/ValueDisplay.tsx","Counter/CounterDisplay/Button.tsx","Counter/CounterDisplay/Display.tsx","Counter/Wrapp.tsx","index.tsx","Counter/CounterSet/Setting.module.css"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InputDisplay","props","inputClass","error","s","input","displayClass","display","className","displayWrap","title","type","value","onChange","e","changeValue","currentTarget","valueAsNumber","SetButton","disabled","onClick","action","Setting","App","Wrapper","maxValue","changeMaxValue","startValue","changeStartValue","buttons","button","localStorage","setItem","JSON","stringify","setCount","setButton","incr","ValueDisplay","count","Button","Display","Wrapp","useState","setStartValue","setMaxValue","setError","useEffect","getValue","getItem","newValue","parse","minValue","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uKAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,8BC0BCQ,MAtBf,SAAsBC,GAEnB,IAAMC,EAAaD,EAAME,MAAQC,IAAEC,MAAQ,IAAMD,IAAED,MAAQC,IAAEC,MAMtDC,EAAeF,IAAEG,QACvB,OACI,sBAAKC,UAAWJ,IAAEK,YAAlB,UACG,uBAAMD,UAAWF,EAAjB,cAAiCL,EAAMS,SACtC,8BAAM,uBACFF,UAAWN,EACXS,KAAK,SACLC,MAAOX,EAAMW,MACbC,SAbK,SAACC,GACdb,EAAMc,YAAYD,EAAEE,cAAcC,wBCO3BC,MAbf,SAAmBjB,GACf,OACI,+BACI,wBACIkB,SAAUlB,EAAMkB,SAChBC,QAASnB,EAAMoB,OACfb,UAAWP,EAAMO,UAHrB,SAIKP,EAAMS,WC2CRY,MA7Cf,SAAiBrB,GAcb,OACI,qBAAKO,UAAWJ,IAAEmB,IAAlB,SACI,sBAAKf,UAAWJ,IAAEoB,QAAlB,UAEI,8BACI,cAAC,EAAD,CACAd,MAAO,aACPE,MAAOX,EAAMwB,SACbtB,MAAOF,EAAME,MACbY,YAAad,EAAMyB,mBAGvB,8BACI,cAAC,EAAD,CACAhB,MAAO,eACPE,MAAOX,EAAM0B,WACbxB,MAAOF,EAAME,MACbY,YAAad,EAAM2B,qBAIvB,qBAAKpB,UAAWJ,IAAEyB,QAAlB,SAEI,cAAC,EAAD,CAAWV,SAAUlB,EAAM6B,OAAQT,OAlCvC,WAERU,aAAaC,QAAQ,WAAYC,KAAKC,UAAUjC,EAAMwB,WACtDM,aAAaC,QAAQ,aAAcC,KAAKC,UAAUjC,EAAM0B,aACxDI,aAAaC,QAAQ,aAAcC,KAAKC,UAAUjC,EAAM0B,aAExD1B,EAAMkC,SAASlC,EAAM0B,YACrB1B,EAAMmC,WAAU,IA2B4C1B,MAAM,MAAMF,UAAWJ,IAAEiC,e,KC/B9EC,MAZf,SAAsBrC,GAElB,IAAMK,EAAeL,EAAMsC,QAAUtC,EAAMwB,SAAW,OAAS,UAC/D,OACI,qBAAKjB,UAAU,cAAf,SACKP,EAAME,MAAQ,qBAAKK,UAAW,eAAhB,gCAA4DP,EAAM6B,OAAkE,sBAAKtB,UAAWF,EAAhB,cAAgCL,EAAMsC,SAA/F,qBAAK/B,UAAW,aAAhB,mCCUvFgC,MAdf,SAAgBvC,GAEZ,OACI,+BACI,wBACIkB,SAAUlB,EAAMkB,SAChBC,QAASnB,EAAMoB,OACfb,UAAWP,EAAMO,UAHrB,SAIKP,EAAMS,WCoBR+B,MAxBf,SAAiBxC,GAOb,OACI,qBAAKO,UAAU,MAAf,SACI,sBAAKA,UAAU,UAAf,UAEI,cAAC,EAAD,CAAcsB,OAAQ7B,EAAM6B,OAAQ3B,MAAOF,EAAME,MAAOoC,MAAOtC,EAAMsC,MAAOd,SAAUxB,EAAMwB,WAE5F,sBAAKjB,UAAU,UAAf,UAEA,cAAC,EAAD,CAAQW,SAAUlB,EAAMsC,OAAUtC,EAAMwB,WAAaxB,EAAM6B,QAAU7B,EAAME,MAAOkB,OAbjF,kBAAMpB,EAAMsC,MAAQtC,EAAMwB,SAAWxB,EAAMkC,SAASlC,EAAMsC,MAAQ,GAAK,IAawB7B,MAAM,OAAOF,UAAU,SACvH,cAAC,EAAD,CAAQW,SAAUlB,EAAMsC,OAAStC,EAAM0B,aAAe1B,EAAM6B,QAAU7B,EAAME,MAAOkB,OAZnF,WAAOpB,EAAMkC,SAASlC,EAAM0B,aAYoEjB,MAAM,MAAMF,UAAU,iBC1B/H,SAASkC,IAAS,IAAD,EACQC,oBAAS,GADjB,mBACbb,EADa,KACLM,EADK,OAEgBO,mBAAS,GAFzB,mBAEbhB,EAFa,KAEDiB,EAFC,OAGYD,mBAAS,GAHrB,mBAGblB,EAHa,KAGHoB,EAHG,OAIMF,mBAAShB,GAJf,mBAIbY,EAJa,KAINJ,EAJM,OAKMQ,oBAAS,GALf,mBAKbxC,EALa,KAKN2C,EALM,KAOpBC,qBAAU,WACN,IAAIC,EAAWjB,aAAakB,QAAQ,cACpC,GAAID,EAAU,CACV,IAAIE,EAAWjB,KAAKkB,MAAMH,GAC1Bb,EAASe,MAEd,IACHH,qBAAU,WACN,IAAIC,EAAWjB,aAAakB,QAAQ,YACpC,GAAID,EAAU,CACV,IAAIE,EAAWjB,KAAKkB,MAAMH,GAC1BH,EAAYK,MAEjB,IACHH,qBAAU,WACN,IAAIC,EAAWjB,aAAakB,QAAQ,cACpC,GAAID,EAAU,CACV,IAAIE,EAAWjB,KAAKkB,MAAMH,GAC1BJ,EAAcM,MAEnB,IAwBH,OACI,sBAAK1C,UAAW,aAAhB,UACI,cAAC,EAAD,CACImB,WAAYA,EACZF,SAAUA,EACVtB,MAAOA,EACPgC,SAAUA,EACVC,UAAWA,EACXN,OAAQA,EACRF,iBA9Ba,SAACwB,GACtBN,GAAS,GACTF,EAAcQ,GACdhB,GAAU,IACNgB,GAAY3B,GAAY2B,EAAW,KACnCN,GAAS,GACTV,GAAU,KAyBNV,eArBW,SAACd,GACpBkC,GAAS,GACTD,EAAYjC,GACZwB,GAAU,IACNxB,GAASe,GAAcf,EAAQ,KAC/BkC,GAAS,GACTV,GAAU,OAiBV,cAAC,EAAD,CACIT,WAAYA,EACZF,SAAUA,EACVc,MAAOA,EACPJ,SAAUA,EACVhC,MAAOA,EACP2B,OAAQA,OCpExBuB,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAACb,EAAD,MAGFc,SAASC,eAAe,SAM1BlE,K,kBCjBAmE,EAAOC,QAAU,CAAC,IAAM,qBAAqB,QAAU,yBAAyB,YAAc,6BAA6B,QAAU,yBAAyB,QAAU,yBAAyB,KAAO,sBAAsB,KAAO,sBAAsB,MAAQ,uBAAuB,MAAQ,yB","file":"static/js/main.d9348c5f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { ChangeEvent } from 'react';\r\nimport './Setting.module.css';\r\nimport s from './Setting.module.css';\r\n\r\n\r\n\r\ntype DisplayType = {\r\n    title:string\r\n    value:number\r\n    error:boolean\r\n    changeValue: (value: number) => void\r\n}\r\n\r\nfunction InputDisplay(props:DisplayType) {\r\n\r\n   const inputClass = props.error ? s.input + ' ' + s.error : s.input\r\n    const onChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        props.changeValue(e.currentTarget.valueAsNumber)\r\n\r\n    }\r\n\r\n    const displayClass = s.display\r\n    return (\r\n        <div className={s.displayWrap}>\r\n           <span className={displayClass}> {props.title}</span>\r\n            <div ><input\r\n                className={inputClass}\r\n                type=\"number\"\r\n                value={props.value}\r\n                onChange={onChange}\r\n            /></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputDisplay\r\n\r\n","import React from 'react';\r\nimport './Setting.module.css';\r\n\r\n\r\ntype ButtonsType = {\r\n    title: string\r\n    action: () => void\r\n    disabled: boolean\r\n    className: string\r\n}\r\n\r\nfunction SetButton(props: ButtonsType) {\r\n    return (\r\n        <span>\r\n            <button\r\n                disabled={props.disabled}\r\n                onClick={props.action}\r\n                className={props.className}>\r\n                {props.title}\r\n            </button>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default SetButton","import React, {useEffect, useState} from 'react';\nimport s from './Setting.module.css';\nimport InputDisplay from './InputDisplay';\nimport SetButton from \"./SetButton\";\n\ntype AppSetType = {\n    maxValue: number\n    startValue: number\n    error: boolean\n    setCount: (value: number) => void\n    setButton: (value: boolean) => void\n    button: boolean\n    changeStartValue: (startValue: number) => void\n    changeMaxValue: (maxValue: number) => void\n}\n\nfunction Setting(props: AppSetType) {\n\n\n    const set = () => {\n\n        localStorage.setItem('maxValue', JSON.stringify(props.maxValue));\n        localStorage.setItem('startValue', JSON.stringify(props.startValue));\n        localStorage.setItem('countValue', JSON.stringify(props.startValue))\n\n        props.setCount(props.startValue)\n        props.setButton(true)\n    }\n\n\n    return (\n        <div className={s.App}>\n            <div className={s.Wrapper}>\n\n                <div>\n                    <InputDisplay\n                    title={'Max value:'}\n                    value={props.maxValue}\n                    error={props.error}\n                    changeValue={props.changeMaxValue}\n                />\n                </div>\n                <div>\n                    <InputDisplay\n                    title={'Start value:'}\n                    value={props.startValue}\n                    error={props.error}\n                    changeValue={props.changeStartValue}\n                />\n                </div>\n\n                <div className={s.buttons}>\n\n                    <SetButton disabled={props.button} action={set} title='set' className={s.incr}/>\n\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Setting;\n","import React from 'react';\r\nimport './Setting.css';\r\n\r\ntype DisplayType = {\r\n    count:number\r\n    maxValue:number\r\n    error:boolean\r\n    button:boolean\r\n}\r\n\r\nfunction ValueDisplay(props:DisplayType) {\r\n\r\n    const displayClass = props.count === props.maxValue ? 'maks' : 'display'\r\n    return (\r\n        <div className='displayWrap'>\r\n            {props.error ? <div className={'displayError'}> Incorrect value! </div> : !props.button ? <div className={'displaySet'}>  Push set button </div> : <div className={displayClass}> {props.count}</div>}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ValueDisplay\r\n\r\n\r\n","import React from 'react';\r\nimport './Setting.css';\r\n\r\n\r\ntype ButtonsType = {\r\n    title: string\r\n    action: () => void\r\n    disabled: boolean\r\n    className: string\r\n}\r\n\r\nfunction Button(props: ButtonsType) {\r\n\r\n    return (\r\n        <span>\r\n            <button\r\n                disabled={props.disabled}\r\n                onClick={props.action}\r\n                className={props.className}>\r\n                {props.title}\r\n            </button>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react';\nimport './Setting.css';\nimport ValueDisplay from './ValueDisplay';\nimport Button from \"./Button\";\n\n\ntype AppType = {\n    maxValue:number\n    startValue:number\n    setCount:(value: number) => void\n    count:number\n    error:boolean\n    button:boolean\n}\n\nfunction Display(props:AppType) {\n\n    const incr = () => props.count < props.maxValue ? props.setCount(props.count + 1) : ''\n\n    const res = () => {props.setCount(props.startValue)}\n\n\n    return (\n        <div className=\"App\">\n            <div className='Wrapper'>\n\n                <ValueDisplay button={props.button} error={props.error} count={props.count} maxValue={props.maxValue}/>\n\n                <div className='buttons'>\n\n                <Button disabled={props.count  == props.maxValue || !props.button || props.error} action={incr} title='incr' className='incr'/>\n                <Button disabled={props.count == props.startValue || !props.button || props.error} action={res} title='res' className='res'/>\n\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Display;\n","import Setting from \"./CounterSet/Setting\";\r\nimport Display from \"./CounterDisplay/Display\";\r\nimport React, {useEffect, useState} from \"react\";\r\n\r\n\r\nexport function Wrapp() {\r\n    const [button, setButton] = useState(true)\r\n    const [startValue, setStartValue] = useState(0)\r\n    const [maxValue, setMaxValue] = useState(0)\r\n    const [count, setCount] = useState(startValue)\r\n    const [error, setError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        let getValue = localStorage.getItem('countValue')\r\n        if (getValue) {\r\n            let newValue = JSON.parse(getValue)\r\n            setCount(newValue)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        let getValue = localStorage.getItem('maxValue')\r\n        if (getValue) {\r\n            let newValue = JSON.parse(getValue)\r\n            setMaxValue(newValue)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        let getValue = localStorage.getItem('startValue')\r\n        if (getValue) {\r\n            let newValue = JSON.parse(getValue)\r\n            setStartValue(newValue)\r\n        }\r\n    }, [])\r\n\r\n\r\n    const changeStartValue = (minValue: number) => {\r\n        setError(false)\r\n        setStartValue(minValue)\r\n        setButton(false)\r\n        if (minValue >= maxValue || minValue < 0) {\r\n            setError(true)\r\n            setButton(true)\r\n        }\r\n    }\r\n\r\n    const changeMaxValue = (value: number) => {\r\n        setError(false)\r\n        setMaxValue(value)\r\n        setButton(false)\r\n        if (value <= startValue || value < 0) {\r\n            setError(true)\r\n            setButton(true)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={'allCounter'}>\r\n            <Setting\r\n                startValue={startValue}\r\n                maxValue={maxValue}\r\n                error={error}\r\n                setCount={setCount}\r\n                setButton={setButton}\r\n                button={button}\r\n                changeStartValue={changeStartValue}\r\n                changeMaxValue={changeMaxValue}\r\n            />\r\n            <Display\r\n                startValue={startValue}\r\n                maxValue={maxValue}\r\n                count={count}\r\n                setCount={setCount}\r\n                error={error}\r\n                button={button}\r\n            />\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Wrapp} from \"./Counter/Wrapp\";\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <Wrapp/>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Setting_App__3SC0T\",\"Wrapper\":\"Setting_Wrapper__1WJz7\",\"displayWrap\":\"Setting_displayWrap__1775n\",\"buttons\":\"Setting_buttons__3FFKv\",\"display\":\"Setting_display__15Dio\",\"incr\":\"Setting_incr__3pLP9\",\"maks\":\"Setting_maks__3_OWo\",\"input\":\"Setting_input__1UOJo\",\"error\":\"Setting_error__23zQ1\"};"],"sourceRoot":""}